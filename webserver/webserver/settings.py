"""
Django settings for webserver project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import configparser
import redis

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load Config
config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR, "config/default.ini"))
ENV_DEBUG = config.get("Main", "debug")
ENV_DOCS = config.get("Main", "api_docs")
ENV_HOSTS = config.get("Main", "allow")

WORKDIR = config.get("Main", "work_dir")
DB_HOST = config.get("Mysql", "host")
DB_USER = config.get("Mysql", "username")
DB_PASSWORD = config.get("Mysql", "password")
DB_NAME = config.get("Mysql", "database")
DB_PORT = config.getint("Mysql", "port")
TablePrefix = config.get("Mysql", "table_prefix")

RD_HOST = config.get("Redis", "host")
RD_PORT = config.getint("Redis", "port")
RD_PASSWORD = config.get("Redis", "password")
RD_NAME = config.get("Redis", "database")

CTR_ADDRESS = config.get("ControllerManager", "address")
CTR_SECRET_KEY = config.get("ControllerManager", "secret_key")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(2_x6kc*5v47gj_+(&xrji+&ng6mj*z^r7z_3(=n8m+#p!-#^*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if ENV_DEBUG == "true" else False
AUTH_USER_MODEL = "UserManage.User"
ALLOWED_HOSTS = [h for h in ENV_HOSTS.split(",")]

# Create directory
for dirs in ["logs", "media"]:
    if not os.path.exists(BASE_DIR + "/" + dirs):
        os.makedirs(BASE_DIR + "/" + dirs)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'webserver.common',
    'webserver.website',
    'webserver.UserManage',
    'webserver.ResourceManage',
    'webserver.BusinessManage',
    'webserver.AuditManage',
    'webserver.SystemManage',
    'webserver.EventManage',
    'webserver.AlarmManage',
    'webserver.TaskManage',
    'webserver.AuthManage',
    'webserver.JobsManage'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'webserver.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            "%s/public/static/html/" % os.path.dirname(BASE_DIR),
        ],
        'APP_DIRS': False,
        "OPTIONS": {
           "context_processors": [
              "django.template.context_processors.debug",
              "django.template.context_processors.request",
              "django.contrib.auth.context_processors.auth",
              "django.contrib.messages.context_processors.messages"
           ],
           "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
           "debug": DEBUG
        },
    },
]

# WSGI 路由
WSGI_APPLICATION = 'webserver.wsgi.application'
TATIC_URL = "/static/"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        "ENGINE": "django.db.backends.mysql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "OPTIONS": {
              "init_command": "SET default_storage_engine='INNODB';SET foreign_key_checks=0;"
        }
    }
}

# Redis
RDS = redis.StrictRedis(host=RD_HOST, port=RD_PORT, password=RD_PASSWORD, db=RD_NAME)

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'

# SWAGGER
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        "basic": {
            'type': 'basic'
        }
    }
}

# Media Path
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# REST_FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
       'rest_framework.authentication.SessionAuthentication',
       'rest_framework.authentication.TokenAuthentication',
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'PAGE_SIZE': 10
}

# Logging setting
LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
      "standard": {
         "format": "%(asctime)s [logger:%(name)s] %(filename)s[line:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s"
      }
    },
    "handlers": {
        "null": {
            "level": "DEBUG",
            "class": "logging.NullHandler",
        },
        "default": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, 'logs', 'app.log'),
            "maxBytes": 1024*1024*5,
            "backupCount": 5,
            "formatter": "standard",
        },
        "request_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, 'logs', 'request.log'),
            "maxBytes": 1024*1024*5,  # 5 MB
            "backupCount": 5,
            "formatter": "standard",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "standard"
        }
    },
    "loggers": {
        "app.views": {
            "handlers": ["console", "default"],
            "level": LOG_LEVEL,
            "propagate": False
        },
        "django": {
            'handlers': ['null'],
            'propagate': False,
            'level': LOG_LEVEL,
        },
        "django.server": {
            'handlers': ["console", "request_handler"],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        "django.request": {
            "handlers": ["request_handler"],
            "level": "ERROR",
            "propagate": True
        }
    }
}
